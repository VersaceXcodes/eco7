REVIEWER: Cross-cutting product QA for request/response alignment and runtime stability

Context Summary:
{
  "projectId": "eco7",
  "lastAccessed": "2025-10-23T16:47:30.137Z",
  "validationAttempts": 0,
  "commonIssues": [],
  "resolvedIssues": [],
  "dependencies": [],
  "missingDependencies": [],
  "knownFileCount": 0,
  "keyFindings": []
}

Project Structure:
FULL PROJECT STRUCTURE CONTEXT for Agent:
=====================================

Working Directory: /app

PROJECT DIRECTORIES:
/app
/app/.git
/app/.git/info
/app/.git/hooks
/app/.git/branches
/app/.git/refs
/app/.git/refs/heads
/app/.git/refs/tags
/app/.git/refs/remotes
/app/.git/objects
/app/.git/objects/pack
/app/.git/objects/info
/app/.git/logs
/app/.git/logs/refs
/app/backend
/app/exports
/app/vitereact
/app/vitereact/src
/app/vitereact/src/assets
/app/vitereact/src/components


KEY PROJECT FILES:
/app/README.md
/app/backend/initdb.js
/app/backend/jest.config.ts
/app/backend/package-lock.json
/app/backend/package.json
/app/backend/schema.ts
/app/backend/server.test.ts
/app/backend/server.ts
/app/backend/tsconfig.json
/app/exports/1761237467704.json
/app/exports/1761237474633.json
/app/exports/1761237486064.json
/app/exports/1761237495251.json
/app/exports/1761237530377.json
/app/exports/1761237609202.json
/app/exports/1761237643493.json
/app/exports/1761237650761.json
/app/exports/1761237684516.json
/app/exports/1761237708966.json
/app/exports/1761237737239.json
/app/exports/1761237737616.json
/app/exports/1761237738731.json
/app/exports/1761237747408.json
/app/exports/1761237749204.json
/app/exports/1761237770471.json
/app/exports/1761237770620.json
/app/exports/1761237788533.json
/app/exports/1761237788574.json
/app/exports/1761237789620.json
/app/exports/1761237793138.json
/app/exports/1761237793178.json
/app/exports/1761237794352.json
/app/exports/1761237794604.json
/app/exports/1761237794636.json
/app/exports/1761237795582.json
/app/exports/1761237795845.json
/app/exports/1761237795850.json
/app/exports/1761237796859.json
/app/exports/1761237796872.json
/app/exports/1761237796887.json
/app/exports/1761237797856.json
/app/exports/1761237798217.json
/app/exports/1761237798220.json
/app/exports/1761237799030.json
/app/exports/1761237799032.json
/app/exports/1761237799183.json
/app/exports/1761237799393.json
/app/exports/1761237801204.json
/app/exports/1761237803977.json
/app/exports/1761237803981.json


FRONTEND (vitereact) PACKAGE.JSON:
  Scripts: dev, build, lint, preview
  Dependencies: 62 packages
  DevDependencies: 16 packages
  Key Dependencies: @hookform/resolvers, @radix-ui/react-accordion, @radix-ui/react-alert-dialog, @radix-ui/react-aspect-ratio, @radix-ui/react-avatar, @radix-ui/react-checkbox, @radix-ui/react-collapsible, @radix-ui/react-context-menu, @radix-ui/react-dialog, @radix-ui/react-dropdown-menu

BACKEND PACKAGE.JSON:
  Scripts: start, build, dev, test, test:watch, test:coverage
  Dependencies: 15 packages
  Key Dependencies: @electric-sql/pglite, @types/bcryptjs, bcryptjs, cors, dotenv, express, jsonwebtoken, morgan, pg, ts-node

ROOT PACKAGE.JSON:
  Scripts: dev

BACKEND SCHEMA AVAILABLE:
  Location: /app/backend/schema.ts
  Size: 14625 characters
  Contains Zod schemas for type validation

BACKEND SERVER AVAILABLE:
  Location: /app/backend/server.ts
  Size: 28218 characters
  Contains actual API endpoints and implementations

PROTECTED DIRECTORIES (DO NOT MODIFY):
  - /app/vitereact/src/components/ui/** (UI library)
  - /app/node_modules/** (Dependencies)
  - /app/.git/** (Version control)



Your tasks:
1) Verify frontend->backend API request/response contracts match (paths, params, types). Fix mismatches (frontend or backend).
2) Detect and fix infinite loops/re-renders in React components (useEffect deps, React query, state mutations during render, runaway timers, polling without guards).
3) Detect and fix potential runtime/compile errors that cause blank/white screens (missing imports, undefined props/state, bad keys, invalid JSX, vite aliases, tsconfig paths, circular imports).
4) Ensure the SPA renders without console errors and key pages load.
5) For backend, coerce query params where appropriate (limit, offset, booleans) and relax/ default non-critical fields (e.g., search-history) to prevent 400s.
6) Test backend API endpoints with curl commands - verify server responds correctly and data matches frontend expectations:
   - Health check: curl -s http://localhost:3000/api/health
   - Auth endpoints: curl -X POST -H "Content-Type: application/json" -d '{"email":"test@example.com","password":"test123"}' http://localhost:3000/api/auth/login
   - GET endpoints: curl http://localhost:3000/api/users (or similar data endpoints)
   - Verify responses match frontend data structure expectations and db.sql schema
7) Test database connectivity and validate that API responses align with database schema in db.sql file.
8) Compare actual API response structures (from curl tests) with frontend data fetching code to ensure compatibility.

Important:
- Make minimal, targeted edits. Prefer z.coerce.number()/boolean() and sensible defaults over hard failures.
- Keep APIs under /api; static SPA via backend if configured.
- Use curl commands to test actual backend functionality before validating frontend integration.
- Fix any mismatches between database schema, backend responses, and frontend expectations.
- Output the code edits directly.
- Don't delete api endpoints

